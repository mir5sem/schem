Артюх Валерий Андреевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_0.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Белов Илья Андреевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_5.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Берро Никита Сергеевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Умножение. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(2) Команда: Деление. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(3) Команда: Побитовое сложение по модулю 2. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН | Адрес операнда 2 в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Блинов Всеволод Алексеевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Побитовая операция ИЛИ-НЕ. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
(2) Команда: Побитовая операция ИЛИ-НЕ. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(3) Команда: Условный переход (результат на АЛУ <= 0). Формат команды: Код операции | Адрес команды.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Вартанов Александр Сергеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_1.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_1.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_2.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных значений первого входа, всех возможных значений второго входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Гладков Алексей Николаевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Переместить из регистра РОН в память данных. Формат команды: Код операции | Адрес для записи | Адрес для чтения.
(2) Команда: Деление. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(3) Команда: Побитовая эквивалентность. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Дайнеко Михаил Юрьевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_2.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_2.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Девяткин Андрей Максимович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Заикина Любава Юрьевна
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Заливакин Алексей Сергеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_1.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Кизина Маргарита Владимировна
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_5.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Кожевников Дмитрий Алексеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_5.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_9.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Королев Илья Денисович
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Умножение. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(2) Команда: Деление. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(3) Команда: Побитовое сложение по модулю 2. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН | Адрес операнда 2 в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Косьянов Максим Алексеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_3.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Крюков Алексей Валерьевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Кулдина Алена Александровна
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_4.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_4.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений второго входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Лабкович Егор Витальевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов systemverilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_5.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console'


Малашкевич Кирилл Павлович
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Инкремент. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(2) Команда: Безусловный переход. Формат команды: Код операции | Адрес команды.
(3) Команда: Побитовая операция И-НЕ. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Манаенков Владимир Евгеньевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Условный переход (результат на АЛУ >= 0). Формат команды: Код операции | Адрес команды.
(2) Команда: Переместить из регистра РОН в память данных. Формат команды: Код операции | Адрес для записи | Адрес для чтения.
(3) Команда: Модуль. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Мебония Азарий Гелаевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Меренков Кирилл Антонович
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Побитовая эквивалентность. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН | Адрес операнда 2 в РОН.
(2) Команда: Сложение. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
(3) Команда: Побитовая дизъюнкция. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Огородников Александр Андреевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Арифметический сдвиг влево. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(2) Команда: Циклический сдвиг вправо. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(3) Команда: Модуль. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Перимей Пётр Михайлович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_4.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Плотников Михаил Ильич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы


Токарев Вадим Владимирович
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Переместить из памяти данных в регистр РОН. Формат команды: Код операции | Адрес для записи | Адрес для чтения.
(2) Команда: Остаток от деления. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
(3) Команда: Побитовая конъюнкция. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Чесноков Денис Сергеевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Сложение. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
(2) Команда: Побитовая конъюнкция. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН | Адрес операнда 2 в РОН.
(3) Команда: Инкремент. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Шувалов Даниил Павлович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы

