Андреев Дмитрий Алексеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Буланов Алексей Владимирович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_2.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Быков Константин Павлович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_7.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Ванин Тимур Владимирович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Воробьев Дмитрий Максимович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Горохов Михаил Павлович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_3.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Гурский Никита Александрович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Загулин Алексей Львович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Зырянов Максим Алексеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_2.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Игнатов Илья Александрович
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Деление. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(2) Команда: Побитовое сложение по модулю 2. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
(3) Команда: Умножение. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Караваев Иван Игоревич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_9.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_9.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_9.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Ким Никита Сергеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_0.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Кравченко Иван Васильевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_4.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_4.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных значений первого входа, всех возможных значений второго входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Лобода Антон Сергеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_0.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений второго входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Малыхина Екатерина Владимировна
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_3.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_3.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений второго входа. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Махов Ярослав Александрович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_6.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Медведев Антон Григорьевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Побитовая эквивалентность. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(2) Команда: Побитовая эквивалентность. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(3) Команда: Переместить из регистра РОН в регистр РОН. Формат команды: Код операции | Адрес для чтения | Адрес для записи.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Павловская Дарья Владимировна
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_2.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Пархоменко Владимир Сергеевич
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Побитовая операция ИЛИ-НЕ. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН | Адрес операнда 2 в РОН.
(2) Команда: Условный переход (результат на АЛУ != 0). Формат команды: Код операции | Адрес команды.
(3) Команда: Побитовая эквивалентность. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Петрова Ольга Алексеевна
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_7.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_7.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных значений первого входа, всех возможных значений второго входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Рассказов Григорий Сергеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_0.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_0.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_3.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений второго входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Редькин Руслан Владимирович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_8.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Провести проверку утверждений используя механизм sequence, property, assertion. Список утверждений приведен в файле utv_8.txt. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'
Задача 2.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_5.v. Используя механизм случайной генерации для классов SystemVerilog, провести тестирование. Отобразить покрытие данных тестами для всех возможных состояний автомата, всех возможных значений первого входа, всех возможных значений выходных данных. В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать код модулей проекта, тестового окружения и скриншоты текста из окна 'TCL Console.'


Рыбачек Степан Михайлович
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_6.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Сачук Андрей Александрович
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Вычитание. Формат команды: Код операции | Адрес операнда 1 в РОН | Адрес операнда 2 в РОН | Адрес результата в РОН.
(2) Команда: Переместить из памяти данных в регистр РОН. Формат команды: Код операции | Адрес для чтения | Адрес для записи.
(3) Команда: Логический сдвиг влево. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.


Столяров Вячеслав Сергеевич
Задача 1.
Дан модуль, осуществляющий обработку данных. Модуль представлен в файле mod_4.v. Дополнить модуль контроллерами ввода и вывода. Составить программу и методику проведения испытаний. Шаблон документа представлен в файле «Шаблон ПМИ.docx». Провести испытания и составить протокол проведения испытания. Шаблон документа представлен в файле «Шаблон протокол.docx». Оформить исходный код модулей согласно шаблону документа «Шаблон текст программы». В качестве ответа предоставить архив, который должен содержать требуемые согласно постановке задачи документы.


Сытина Ксения Витальевна
Задача 1.
Построить архитектуру системы команды (АСК) и микроархитектуру конвейерного процессорного ядра.Продемонстрировать конфликтные ситуации и пути их решения.  
Реализовать процессорное ядро на языке Verilog согласно разработанным АСК и микроархитектуре.
Тип архитектуры: Гарвардская
Количество стадий: 3
Компонентный состав: регистровый файл (РОН), память данных, память команд, счётчик команд, регистр команды, регистры операндов, регистр результата (при необходимости)
Размеры для РОН, памяти данных и памяти команд определяютcя разработчиком.
Архитектура системы команд: 
(1) Команда: Загрузка литерала в память данных. Формат команды: Код операции | Адрес для записи | Литерал.
(2) Команда: Побитовая операция И-НЕ. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
(3) Команда: Деление. Формат команды: Код операции | Адрес операнда 1 в РОН / результата в РОН.
В качестве ответа предоставить отчёт в формате .pdf. Отчёт должен содержать:
- таблицу, содержащую форматы команд;
- значения параметров компонентов (регистровый файл, память данных, память команд, счётчик команд, регистр команды, регистры операндов/результата);
- таблица с описанием выполнения каждой команды на всех стадиях процессорного ядра;
- описание конфликтных ситуаций и путей их решения;
- все модули проекта;
- результаты верификации проекта при помощи симуляции.

